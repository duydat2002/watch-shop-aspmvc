@using X.PagedList;
@using X.PagedList.Mvc.Core;

@model Color


@{
  ViewData["Title"] = "Create Color";
  ViewBag.NavActive = "Color";
}

<h3 class="page-title">Create Color</h3>
<div class="breakcrumb">
  <span class="breakcrumb-root">Manage</span>
  <i class="fa-solid fa-angles-right"></i>
  <span><a href="/admin/attributes/colors">Colors</a></span>
  <i class="fa-solid fa-angles-right"></i>
  <span>Create</span>
</div>
<div class="content">
  <div class="flex cl-gap">
    <div class="col-8 pd-gap">
      <div class="card list-container" id="list-product">
        <div class="card-header flex">
          <span class="card-title">Product List</span>
          <div class="modal-container" id="add_product_container">
            <button class="button button-gb hidden" id="add_product_modal_btn">Add Product</button>
            <div class="extend-modal add-product-modal hidden" id="add_product_modal">
              <div class="modal-header">
                <div class="search-container">
                  <input type="text" name="search_add_products" class="search-input"
                    placeholder="Search products by name">
                  <button class="modal-button search-button">Search</button>
                </div>
              </div>
              <div class="modal-body">
                <div class="modal-list" id="add_product_list">

                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="card-body-scroll" id="product_list_card">
            <span>Create color before add product.</span>
          </div>
        </div>
      </div>
    </div>
    <div class="col-4 pd-gap">
      <div class="card">
        <div class="card-header">
          <span class="card-title">Color Info</span>
        </div>
        <div class="card-body">
          <div class="form">
            <div class="form-row">
              <span class="form-title">Color Name</span>
              <input type="text" asp-for="ColorName" class="form-input" id="input-color-name">
              <span class="form-error text-danger color-name-error hidden">Please enter color name.</span>
            </div>
            <div class="form-row">
              <span class="form-title">Color Value</span>
              <input type="color" value="#000000" asp-for="ColorValue" class="form-input" id="input-color-value"
                style="height: 40px;">
              <span class="form-error text-danger color-value-error hidden">Please choose color.</span>
            </div>
          </div>
          <div class="form-buttons">
            <button class="button button-gb form-button" id="save-button">Create</button>
          </div>
          <div class="form-message">
            <span class="form-error text-danger hidden">Something went wrong!</span>
            <span class="form-success text-success hidden">Update successfuly!</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@section JS {
  <script>
    // Save name
    const colorName = document.querySelector("#input-color-name");
    const colorValue = document.querySelector("#input-color-value");
    const colorNameErr = document.querySelector(".color-name-error")

    const saveButton = document.querySelector("#save-button");
    const successDOM = document.querySelector(".form-message .form-success");
    const errorDOM = document.querySelector(".form-message .form-error");
    let ColorId;

    saveButton.addEventListener("click", () => {
      successDOM.classList.add("hidden")
      errorDOM.classList.add("hidden")

      if (validate()) {
        AjaxPost("/admin/api/attributes/colors/create-color",
          { ColorName: colorName.value.trim(), ColorValue: colorValue.value.trim() },
          (responseText) => {
            const data = JSON.parse(responseText);

            if (data.success) {
              successDOM.classList.remove("hidden")
              addProductBtnDOM.classList.remove("hidden")
              ColorId = data.id
            } else {
              errorDOM.innerHTML = data.message ?? "Something went wrong."
              errorDOM.classList.remove("hidden")
            }
          }
        )
      }
    })

    // Validate
    const validate = () => {
      let check = true;
      colorNameErr.classList.add("hidden")

      if (colorName.value.trim() == "") {
        colorNameErr.classList.remove("hidden")
        check = false
      }

      return check
    }

    // Modal
    const addProductContainerDOM = document.querySelector("#add_product_container")
    const addProductModalDOM = document.querySelector("#add_product_modal")
    const addProductBtnDOM = document.querySelector("#add_product_modal_btn")

    onClickOutside(addProductContainerDOM, () => {
      addProductModalDOM.classList.add("hidden")
    })

    addProductBtnDOM?.addEventListener("click", () => {
      addProductModalDOM.classList.remove("hidden")
      getAddProduct()
    })

    // Search
    const productListCardDOM = document.querySelector("#product_list_card");
    const addProductListDOM = document.querySelector("#add_product_list");
    const searchAddProductDOM = document.querySelector(".add-product-modal .search-button");

    searchAddProductDOM.addEventListener("click", () => {
      getAddProduct()
    })

    function getAddProduct() {
      const search = document.querySelector("input[name='search_add_products']").value

      AjaxGet(`/admin/api/products/get-products-without?ColorId=${ColorId}&search=${search}`, (responseText) => {
        addProductListDOM.innerHTML = responseText
      })
    }

    function getProductsCard() {
      const page = getParam("page") ?? 1

      AjaxGet(`/admin/api/products/get-products?ColorId=${ColorId}&page=${page}`, (responseText) => {
        productListCardDOM.innerHTML = responseText

        const itemsDOM = productListCardDOM.querySelectorAll(".item")

        itemsDOM.forEach(item => {
          const deleteDOM = item.querySelector(".action-item.delete")

          deleteDOM.remove();
        })
      })
    }

    // Add Product 
    function handleAddProduct(product) {
      const ProductId = product.dataset.productid
      const SizeId = product.dataset.sizeid

      AjaxPost("/admin/api/products/change-product-color-size",
        { ProductId, ColorId, SizeId },
        (responseText) => {
          const data = JSON.parse(responseText)
          if (data.success) {
            getAddProduct();
            getProductsCard()
          } else {
            console.log("fail");
          }
        })
    }
  </script>
}