@{
    int? RoleId = Context.Session.GetInt32("RoleId");
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/fontawesome.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin.css" asp-append-version="true" />
    @await RenderSectionAsync("Css", required: false)
</head>

<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <a href="/admin" class="header-logo">
                <img src="~/image/Logo.png" alt="Logo">
            </a>
            <a href="/admin" class="header-logo-icon">
                <i class="fa-solid fa-house"></i>
            </a>
        </div>
        <div class="sidebar-scroll">
            <div class="sidebar-navs">
                <div class="nav-category">
                    <span>Manage</span>
                </div>
                <div class="navs">
                    <a href="/admin/user/administrators"
                        class="nav-item @(ViewBag.NavActive == "Administrator" ? "active" : "")">
                        <abbr title="Administrator">
                            <i class="fa-solid fa-user-tie icon"></i>
                        </abbr>
                        <span class="nav-name">Administrator</span>
                    </a>
                    <a href="/admin/user/customers" class="nav-item @(ViewBag.NavActive == "Customer" ? "active" : "")">
                        <abbr title="Customer">
                            <i class="fa-solid fa-users-line icon"></i>
                        </abbr>
                        <span class="nav-name">Customer</span>
                    </a>
                    <a href="/admin/attributes/categories"
                        class="nav-item @(ViewBag.NavActive == "Category" ? "active" : "")">
                        <abbr title="Category">
                            <i class="fa-solid fa-layer-group icon"></i>
                        </abbr>
                        <span class="nav-name">Category</span>
                    </a>
                    <a href="/admin/attributes/colors" class="nav-item @(ViewBag.NavActive == "Color" ? "active" : "")">
                        <abbr title="Color">
                            <i class="fa-solid fa-palette icon"></i>
                        </abbr>
                        <span class="nav-name">Color</span>
                    </a>
                    <a href="/admin/attributes/sizes" class="nav-item @(ViewBag.NavActive == "Size" ? "active" : "")">
                        <abbr title="Size">
                            <i class="fa-solid fa-ruler-horizontal icon"></i>
                        </abbr>
                        <span class="nav-name">Size</span>
                    </a>
                    <a href="/admin/products" class="nav-item @(ViewBag.NavActive == "Product" ? "active" : "")">
                        <abbr title="Product">
                            <i class="fa-solid fa-cube icon"></i>

                        </abbr>
                        <span class="nav-name">Product</span>
                    </a>
                    <a href="/admin/orders" class="nav-item @(ViewBag.NavActive == "Order" ? "active" : "")">
                        <abbr title="Order">
                            <i class="fa-solid fa-clipboard-list icon"></i>
                        </abbr>
                        <span class="nav-name">Order</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="header">
        <div class="header__username">
            <span>@Context.Session.GetString("FullName")</span>
        </div>
        <div class="header__account">
            <div class="account__link">
                <i class="fas fa-user account__icon"></i>
            </div>
            <div class="account__dropdown">
                <a href="/admin/user/change-password" class="account-item">
                    <i class="fa-solid fa-key"></i>
                    <span>Change Password</span>
                </a>
                <form action="/admin/signout" method="post">
                    <button type="submit" class="account-item signout-button">
                        <i class="fas fa-sign-out-alt"></i>
                        Sign Out
                    </button>
                </form>
            </div>
        </div>
    </div>
    <main class="main">
        @RenderBody()
    </main>

    <script>
        var UserId = @(Context.Session.GetInt32("UserId")?.ToString() ?? "null");
        var UserInfo = {
            UserId,
            RoleId: @(Context.Session.GetInt32("RoleId")?.ToString() ?? "null"),
        }
    </script>
    <script>
        const AjaxGet = (url, callback) => {
            const xhr = new XMLHttpRequest();

            xhr.open("GET", url, true);
            xhr.onreadystatechange = () => {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    callback(xhr.responseText);
                }
            };
            xhr.send();
        };

        const AjaxPost = (url, obj, callback) => {
            const xhr = new XMLHttpRequest();

            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            xhr.onreadystatechange = () => {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    callback(xhr.responseText);
                }
            };
            xhr.send(JSON.stringify(obj));
        };

        const AjaxPostNotJson = (url, obj, callback) => {
            const xhr = new XMLHttpRequest();

            xhr.open("POST", url, true);
            xhr.onreadystatechange = () => {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    callback(xhr.responseText);
                }
            };
            xhr.send(obj);
        };

        const changeUrl = (params) => {
            var url = new URL(window.location.href);

            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    url.searchParams.set(key, params[key]);
                }
            }

            window.history.pushState({}, "", url);
        };

        const onClickOutside = (element, callback) => {
            document.addEventListener('click', e => {
                if (!element.contains(e.target)) callback();
            });
        };

        function getParam(paramName) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(paramName);
        }
    </script>
    <script>
        const headerAccountBtn = document.querySelector(".account__link");
        const headerAccountDropdown = document.querySelector(".account__dropdown");

        headerAccountBtn.addEventListener("click", () => {
            headerAccountDropdown.classList.toggle("active");
        });

        window.addEventListener("click", (e) => {
            const headerAccount = document.querySelector(".header__account");
            if (!headerAccount.contains(e.target)) {
                headerAccountDropdown.classList.remove("active");
            }
        });
    </script>
    <script src="~/js/chart.js" asp-append-version="true"></script>
    <script src="~/js/chartjs-plugin-datalabels.js" asp-append-version="true"></script>
    @await RenderSectionAsync("JS", required: false)
</body>

</html>
